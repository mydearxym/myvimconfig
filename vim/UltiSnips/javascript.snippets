
snippet store
const { store } = this.context

store.dispatch(actions.$1)
endsnippet

snippet tooltip
<Tooltip placement="top" title={$1}>
  {$1}
</Tooltip>
endsnippet

snippet popover
<Popover placement="top" title={text} overlay={$1} trigger="click">
  {$1}
</Popover>
endsnippet

snippet fn
$1[0, randomNum(0, $1.length)],
endsnippet

snippet newC
import styles from './_$1.scss'

@CSSModules(styles, { allowMultiple: true })
export default class TagList extends React.Component {
  static propTypes = {
    location: PropTypes.object,
  }

  static contextTypes = {
    store: PropTypes.any,
  }

  constructor (props) {
    super(props)
    this.state = {

    }
  }

  componentDidMount () {
    const { store } = this.context
  }

  render () {
    const  = this.props.

    return (
      <div styleName="main">

      </div>
    )
  }
}
endsnippet


snippet fk
export function $1 (cnt) {
  let fakeData = []

  _times(cnt, () => {
    fakeData.push({
      members: __fakeUsers(10)
    })
  })

  return fakeData
}
endsnippet

snippet rowcol
<div className="row">
  <div className="col-md-$1">

  </div>
  <div className="col-md-$1">

  </div>
</div>
endsnippet

snippet map
{ _isEmpty($1) ? '' : $1.map((item, i) => (
  <div key={i}>

  </div>
))}

endsnippet

snippet rdG
return dispatch => {
  get($1_URL)
    // .then(res => log.ok('$1 Get', res))
    .then(res => dispatch({ type: N.GET_$1 }))
    .catch(err => { log.error('dispatch N.GET_$1 ') })
}
endsnippet

snippet cdm "component did mount"
componentDidMount () {
  ${1}
}
endsnippet

snippet condt
<Cond value={value}>
  {[ isTrue, <$1 key='c0' /> ]}
  {[ isFalse, <$1 key='c1' /> ]}
  {[ otherwise, <$1 key='2' /> ]}
</Cond>
endsnippet

snippet condeq
<Cond value={this.state.$1}>
  {[ eq(), < /> ]}
</Cond>
endsnippet

snippet ck
debugger
endsnippet

snippet tell
dispatch({ type: N.$1, })
endsnippet

snippet ppcs
$1: PropTypes.string,
endsnippet

snippet ppcsr
$1: PropTypes.string.isRequired,
endsnippet

snippet ppco
$1: PropTypes.object,
endsnippet

snippet ppcor
$1: PropTypes.object.isRequired,
endsnippet

snippet ppcf
$1: PropTypes.func,
endsnippet

snippet ppcfr
$1: PropTypes.func.isRequired,
endsnippet

snippet ppca
$1: PropTypes.array,
endsnippet

snippet ppcn
$1: PropTypes.number,
endsnippet

snippet ppcb
$1: PropTypes.bool,
endsnippet

snippet ppce
$1: PropTypes.oneOfType([]),
endsnippet

snippet dg
global.$1 = $1
endsnippet

snippet du
const $1_URL = \`${MUZHI_API}/\`
endsnippet

snippet cl
  console.log('$1')
endsnippet

snippet ecc
export const $1 = '$1'
endsnippet

snippet np
return new Promise((resolve, reject) => {

})
endsnippet

snippet get
let query = { '':   }
get($1_URL, query)
  .then(res => { })
  .catch(err => { })
endsnippet

snippet post
let query = {
  '':  ,
}

post($1_URL, query)
  .then(res => { })
  .catch(err => { })
endsnippet

snippet fg
fetch($1, { method: 'get', body: JSON.stringify({
   '': '',
   '': ''})
})
endsnippet

snippet fp
fetch($1, { method: 'post', body: JSON.stringify({
   '': '',
   '': ''})
})
endsnippet

snippet cx
classNames({
  '$1': ,
})
endsnippet

snippet info
console.info('$1');
endsnippet

snippet logi
log.info('$1')
endsnippet

snippet logb
log.brown('$1')
endsnippet

snippet logo
log.ok('$1')
endsnippet

snippet loge
log.error('$1')
endsnippet

snippet div
<div>$1</div>
endsnippet

snippet divc
<div className="$1"></div>
endsnippet

snippet onchange
onChange={::this.on$1} 
endsnippet

snippet onclick
onClick={::this.on$1} 
endsnippet

snippet et
e.target.$1
endsnippet

snippet etv
e.target.value
endsnippet

snippet tS
this.state.
endsnippet

snippet tss
this.setState({
  $1: ,
})
endsnippet

snippet sto
setTimeout(() => {
  log.info('timeout' + $1)
}, 500)
endsnippet

snippet span
<span>$1</span>
endsnippet

