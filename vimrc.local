imap fd <Esc>
" mydearxym


"=== javascript 
let g:tagbar_type_javascript = {'ctagsbin' : '/usr/local/bin/jsctags'}

set updatetime=500

function! HighlightWordUnderCursor()
    if getline(".")[col(".")-1] !~# '[[:punct:][:blank:]]'
        exec 'match' 'Search' '/\V\<'.expand('<cword>').'\>/'
    else
        match none
    endif
endfunction

autocmd! CursorHold,CursorHoldI * call HighlightWordUnderCursor()

"pluging airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="badwolf"
"let g:airline_theme="jellybeans"
"let g:airline_theme="zenburn"
set statusline=\ [%{HasPaste()}%F%m%r%h%w]\ [%{CurDir()}%h]\ [%l/%L]\ [%c]%{GitBranch()}%h\ [%Y]\ [%{&ff}]\ [%{(&fenc\ ==\ \"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}TJZJF] "Git branch
function! GitBranch()
    try
        let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //'")
    catch
        return ''
    endtry

    if branch != ''
        return ' Git: [' . substitute(branch, '\n', '', 'g') . ']'
    en

    return ''
endfunction


function! CurDir()
    return substitute(getcwd(), '/Users/xieyiming/', "~/", "g")
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE '
    en
    return ''
endfunction


" === gundo
nnoremap T  :GundoToggle<cr>

" ====  guide indent
"随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" ==== multi-cursors
let g:multi_cursor_next_key='<c-\>'
let g:multi_cursor_prev_key='<c-x><s-o>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<C-g>'

"====  ctrlp
let g:ctrlp_map = '<c-c><c-p>'
"====  emment
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key=','

nmap <leader>w :w!<cr> "快速保存
nnoremap <leader>w :w!<cr>

"==== Occur buffer
"<Space> : Set current window height to highest.
"x : Display the occurence the current line.
"q : Quit the quickfix window.
nmap <c-c>o :StarOccur<cr>
nmap <c-s> :StarOccur<cr>
imap <c-c>o <Esc>:StarOccur<cr>
imap <c-s> <Esc>:StarOccur<cr>

"==== highlight word
let g:interestingWordsRandomiseColors = 1
nnoremap <silent> <leader>l :call InterestingWords('n')<cr>
" :call InterestingWords('n')<cr>a
nnoremap <silent> <leader>L :call UncolorAllWords()<cr>

"==== easymotion
nmap <leader>. <Plug>(easymotion-t2)
imap <leader>. <Esc>:<Plug>(easymotion-t2)
" imap <c-i> <esc><Plug>(easymotion-t2)
"nmap t <Plug>(easymotion-t2)

"==== TagMatch
let g:mta_use_matchparen_group=0
let g:mta_set_default_matchtag_color=0
highlight MatchTag ctermfg=black ctermbg=lightgrey guifg=black guibg=lightgrey

set cursorline
" solarized theme
syntax enable
set number
set relativenumber

"===== theme staff
colorscheme lucario
"colorscheme solarized
"colorscheme materialtheme
set t_Co=256
highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

" nnoremap <c-m> :CtrlPFunky<Cr>

nnoremap <c-x><c-b> :CtrlPBuffer<CR>
imap <c-x><c-b> <Esc>:CtrlPBuffer<CR>
imap <leader>d <Esc>:NERDTreeToggle<cr>
imap <leader>f <Esc>:NERDTreeFind<CR>
noremap <leader>A :Align
imap <leader>f <Esc>:NERDTreeFind<CR>
nnoremap <c-c><c-o> :Ag<space>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <c-c><c-l> :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
"nnoremap <leader>G :GitGutterToggle<CR>
nnoremap <leader>g :GitGutterEnable<CR>

" let delimitMate_expand_cr=1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"======= syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ======= beautify js
map <c-c><c-a> :call JsBeautify()<cr>

" ======= enhance js syntax
"au FileType javascript call JavaScriptFold()
let g:used_javascript_libs = 'underscore,requirejs,react,angularjs,angularui,jasmine,jquery'
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 1
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1

""""""""""""""""""""""""" Emacs like binding """"""""""""""""""""""
" nmap <c-/> <Esc>:undo<CR>
" imap <c-/> <Esc>:undo<CR>
nnoremap <C-l> zz
imap <C-l> <Esc>zza
nmap <C-j> <cr>
imap <c-j> <cr>
nmap fd <Esc>
imap <c-a> <esc>^i
nmap <c-a>  ^
imap <c-d> <esc>s
nmap <c-d>  x
imap <c-k> <esc>ddi
imap dd  <esc>ddi
nmap <c-k> <esc>dd "not work

nmap <c-p> Hi<c-l><Esc>
nmap <c-n> Li<c-l><Esc>
imap <c-p> <up>
imap <c-n> <down>


"unmap <c-h>
nnoremap <c-h> X "not work

"快速保存
imap <c-x><c-s> <esc>:w!<cr>a
nmap <c-x><c-s> :w!<cr>

inoremap <c-e> <End>

inoremap <c-f> <right>
inoremap <c-b> <left>
" inoremap <c-n> <down>
" inoremap <c-p> <up>

cnoremap <c-f> <right>
cnoremap <c-b> <left>
" cnoremap <c-n> <down>
" cnoremap <c-p> <up>
cnoremap <c-a> <Home>
cnoremap <c-e> <End>
cnoremap <c-g>  <Esc>
cnoremap fd  <Esc>

"nmap <c-2> v
vmap <c-f> <right>
vmap <c-b> <left>
" vmap <c-n> <down>
" vmap <c-p> <up>
vmap <c-a> <Home>
vmap <c-e> <End>
vmap <c-g> <Esc><Esc>

"inoremap <leader>w :w!<cr> "快速保存
nmap <leader>L :highlight LineNr ctermfg=grey<cr>
nmap <c-f> <right>
nmap <c-b> <left>
" nmap <c-n> <down>
" nmap <c-p> <up>
nmap <c-e> <End>

nmap <c-x><c-c> <Esc>:wq!<cr>
imap <c-x><c-c> <Esc>:wq!

"nmap <c-s> <Esc>/
"imap <c-s> <Esc>/
"f"""""""""""""""""""""""" Emacas like binding """"""""""""""""""""""

"""""""""""""""""""""""""" Basic settting """"""""

" 光标到达行尾或者行首时，特定键继续移动转至下一行或上一行
set whichwrap+=b,s,<,>,[,]"
set expandtab               " Use spaces instead of tabs"
"set listchars=tab:\|\ ,     " 显示Tab符，使用一高亮竖线代替"
set autoindent      " always set autoindenting on
set smartindent
set mps+=<:>        " 让<>可以使用%跳转
set hid             " allow to change buffer without saving
set shortmess=atI   " shortens messages to avoid 'press a key' prompt
set lazyredraw      " do not redraw while executing macros (much faster)"
set ignorecase  " Set search/replace pattern to ignore case
set smartcase   " Set smartcase mode on, If there is upper case character in the search patern, the 'ignorecase' option will be override.
set showcmd     " display incomplete commands
set incsearch   " do incremental searching
set hlsearch    " highlight search
set magic       " Enable magic matching
set showmatch   " show matching paren
"set wildmenu    " 增强模式中的命令行自动完成操作
"set mouse=a    " Enable mouse usage (all modes) in terminals
set showcmd
"在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来
set scrolloff=3
"光标移动到buffer的顶部和底部时保持3行距离
set autoread "如果发现文件在 Vim 之外修改过而在 Vim 里面没有的话，自动重新读入。"
set fileformat=unix "设置<EOL>格式
set fileformats=unix,dos,mac "设置<EOL>格式
"Turn off backups and undo
set nobackup "不备份
set nowb
set noswapfile
set autoread
"use . command in virual mode
vnoremap . :norm.<CR>


map <c-x><c-k> :Bclose<cr>
imap <c-x><c-k> <Esc>:Bclose<cr>

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! " . l:currentBufNum)
    endif
endfunction



function! AutoPair(open, close)
        let line = getline('.')
        if col('.') > strlen(line) || line[col('.') - 1] == ' '
                return a:open.a:close."\<ESC>i"
        else
                return a:open
        endif
endf

function! ClosePair(char)
        if getline('.')[col('.') - 1] == a:char
                return "\<Right>"
        else
                return a:char
        endif
endf

function! SamePair(char)
        let line = getline('.')
        if col('.') > strlen(line) || line[col('.') - 1] == ' '
                return a:char.a:char."\<ESC>i"
        elseif line[col('.') - 1] == a:char
                return "\<Right>"
        else
                return a:char
        endif
endf


inoremap ( <c-r>=AutoPair('(', ')')<CR>
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap { <c-r>=AutoPair('{', '}')<CR>
inoremap } <c-r>=ClosePair('}')<CR>
inoremap [ <c-r>=AutoPair('[', ']')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap " <c-r>=SamePair('"')<CR>
inoremap ' <c-r>=SamePair("'")<CR>
inoremap ` <c-r>=SamePair('`')<CR>
