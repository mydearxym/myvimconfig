

set mouse-=a
noremap <leader>W :w !sudo tee %<CR>

"""""""""""""""""""""""""""""""""""""""""""""""
""  mydarxym@qq.com
""
""  MY  VIM CONFIG
""
""
""""""""""""""""""""""""""""""""""""""""""""""

" clever-f
let g:clever_f_across_no_line=1
let g:clever_f_not_overwrites_standard_mappings = 1
map ; <Plug>(clever-f-t)
map F <Plug>(clever-f-F)
""""""""""""""""""""""""""""""""""""""""""""""
"" snippets
" make YCM compatible with UltiSnips (using supertab)
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'
"
" " better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>""

let g:UltiSnipsExpandTrigger="<c-]>""

""""""""""""""""""""""""""""""""""""""""""""""

nmap <leader>n :Note<space>

"""""""""""""""""""""" Buffer navigatior """""""""""""""""""""""""

nnoremap J <NOP>
nnoremap K <NOP>
nmap J <Esc>:bprevious<cr>
nmap K <Esc>:bnext<cr>

"""""""""""""""""""""" Buffer navigatior """""""""""""""""""""""""

set diffopt=filler
set noerrorbells " Disable error bells"
set mouse=a " Enable mouse in all in all modes"
set title " Show the filename in the window titlebar"
nnoremap <leader>R :%s/\<<C-r><C-w>\>//<Left>
vnoremap <leader>R "hy:%s/\V<C-r>h//<left>"

" indent
let g:indent_guides_start_level=1
let g:indent_guides_guide_size=1
nmap <leader>i :IndentGuidesToggle<cr>

" asterisk *
let g:asterisk#keeppos = 1
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)

" emacs-like search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"hightlight
syn keyword Myfunctions self func_name2
highlight Myfunctions guifg=red


"snippet tirgger

" tagmach
let g:mta_use_matchparen_group = 1
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \}

highlight MatchTag ctermfg=black ctermbg=lightgreen guifg=black guibg=grey
nnoremap <leader>5 :MtaJumpToOtherTag<cr>


imap fd <Esc>
if v:version >= 700
  au BufLeave * let b:winview = winsaveview()
  au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif


if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=Monaco\ Regular:h14
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

set guifont=Monaco:h13

" javascript syntax
"hi Identifier guifg=red
"hi Function guifg=red
"let g:used_javascript_libs = 'underscore,angularjs,react'

" mydearxym
set showtabline=0
"粘贴时不置换“剪贴板”
xnoremap p pgvy

imap <c-/> :fuck
imap <c-u> <Esc>:undo<cr>a
map <c-u> :undo<cr>

"buffer switch

" nmap <c-[>  :bp<cr>
nmap <c-]>  :b#<cr> " for terminal
nmap <S-Enter> :b#<cr>
imap <S-Enter> <Esc>:b#<cr>a
" expand-region
map <space> <Plug>(expand_region_expand)

"manual
set foldmethod=manual
"==== indentline

"==== tmuxify
let g:tmuxify_map_prefix = '<leader>t'

"==== snipMate
au BufRead,BufNewFile *.exs setl ft=elixir
"====
augroup VimCSS3Syntax
    autocmd!

    autocmd FileType css setlocal iskeyword+=-
augroup END


"=== javascript
let g:tagbar_type_javascript = {'ctagsbin' : '/usr/local/bin/jsctags'}

let g:matchmaker_enable_startup = 1
" set updatetime=500
" function! HighlightWordUnderCursor()
"     if getline(".")[col(".")-1] !~# '[[:punct:][:blank:]]'
"         exec 'match' 'Search' '/\V\<'.expand('<cword>').'\>/'
"     else
"         match none
"     endif
" endfunction

" autocmd! CursorHold,CursorHoldI * call HighlightWordUnderCursor()

" ===== ctrlspace
let g:ctrlspace_default_mapping_key='<c-c><c-p>'
let g:ctrlspace_use_ruby_bindings=1

" ===== Greplace
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'

"====== YRing
"要去插件源码把 C-N C-P随便改成其他的键值哈，要不然冲突
nmap <c-c><c-v> :YRShow<cr>
imap <c-c><c-v> <Esc>:YRShow<cr>


"pluging airline
set laststatus=2
"let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="badwolf"
"let g:airline_theme="airlineish"
let g:airline#extensions#tabline#buffer_nr_format = '%s '
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamecollapse = 0
let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline_theme="jellybeans"
"let g:airline_theme="zenburn"
set statusline=\ [%{HasPaste()}%F%m%r%h%w]\ [%{CurDir()}%h]\ [%l/%L]\ [%c]%{GitBranch()}%h\ [%Y]\ [%{&ff}]\ [%{(&fenc\ ==\ \"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}TJZJF] "Git branch
function! GitBranch()
    try
        let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //'")
    catch
        return ''
    endtry

    if branch != ''
        return ' Git: [' . substitute(branch, '\n', '', 'g') . ']'
    en

    return ''
endfunction


function! CurDir()
    return substitute(getcwd(), '/Users/xieyiming/', "~/", "g")
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE '
    en
    return ''
endfunction


" === gundo
nnoremap T  :GundoToggle<cr>

" ==== multi-cursors
let g:multi_cursor_use_default_mapping=0
"let g:multi_cursor_next_key='<c-\>'
let g:multi_cursor_next_key='<c-y>'
"let g:multi_cursor_prev_key='<c-x><s-o>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<C-g>'

"==== ctrlp
" 在插件源码中用乱码重新map
let g:ctrlp_clear_cache_on_exit = 0 " Do not clear filenames cache, to improve CtrlP startup
let g:ctrlp_lazy_update = 100 " Set delay to prevent extra search
"let g:ctrlp_match_window_bottom = 0 " Show at top of window
" let g:ctrlp_max_files = 0 " Set no file limit, we are building a big project
" let g:ctrlp_switch_buffer = 'Et' " Jump to tab AND buffer if already open
" let g:ctrlp_open_new_file = 'r' " Open newly created files in the current window
" let g:ctrlp_open_multiple_files = 'ij' " Open multiple files in hidden buffers, and jump to the first one
nnoremap <c-x><c-f> :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <c-c><c-f> :CtrlPClearCache<CR>:CtrlP<CR>

"==== Ctrlp-funky
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_matchtype = 'path'
nnoremap <c-c><c-m> :CtrlPFunky<Cr>
imap <c-c><c-m> <Esc>:CtrlPFunky<Cr>


"====  emment
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
let g:user_emmet_leader_key=','

nmap <leader>w :w!<cr> "快速保存
nnoremap <leader>w :w!<cr>

"==== Occur buffer
"<Space> : Set current window height to highest.
"x : Display the occurence the current line.
"q : Quit the quickfix window.
nmap <c-c>o :StarOccur<cr>
vmap <c-c>o :StarOccur<cr>
"nmap <c-s> :StarOccur<cr>
imap <c-c>o <Esc>:StarOccur<cr>
"imap <c-c><c-s> <Esc>:StarOccur<cr>

"==== easymotion
"https://github.com/easymotion/vim-easymotion/issues/139
let g:EasyMotion_leader_key = '&^djfi4oejdoife' " easymotion use <leader><leader> as prefix key
let g:EasyMotion_add_search_history = 0 "disable the auto highlight after jump
nmap <leader>, <Plug>(easymotion-sn)
"nmap gg <Plug>(easymotion-sn)

"==== highlight word
let g:interestingWordsRandomiseColors = 1
nmap <leader>l :nohl<cr>
imap <leader>l <Esc>:nohl<cr>a
" imap <leader>, <Esc><leader>ma


set cursorline
" solarized theme
syntax enable
set number
"set relativenumber
"===== theme staff
"colorscheme lucario
set background=dark
"colorscheme solarized
colorscheme Tomorrow-Night
"colorscheme materialtheme
set t_Co=256
"highlight Normal ctermbg=NONE
"highlight nonText ctermbg=NONE
"highlight LineNr ctermfg=grey

" nnoremap <c-m> :CtrlPFunky<Cr>

nnoremap <c-x><c-b> :CtrlPBuffer<CR>
nnoremap <c-c><c-b> :CtrlPBuffer<CR>
imap <c-x><c-b> <Esc>:CtrlPBuffer<CR>
imap <c-c><c-b> <Esc>:CtrlPBuffer<CR>

nmap <leader>d <Esc>:NERDTreeToggle<cr>
nmap <leader>f <Esc>:NERDTreeFind<CR>
noremap <leader>A :Align
" imap <leader>f <Esc>:NERDTreeFind<CR>
nnoremap <c-c><c-o> :Ag<space>

" nmap <c-x><c-f> :CtrlPClearCache<CR>:CtrlP<CR>
" nmap <c-c><c-f> :CtrlPClearCache<CR>:CtrlP<CR>
" imap <c-x><c-f> <Esc>:CtrlPClearCache<CR>:CtrlP<CR>
" imap <c-c><c-f> <Esc>:CtrlPClearCache<CR>:CtrlP<CR>

nnoremap <leader>t :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
"nnoremap <leader>G :GitGutterToggle<CR>
let g:gitgutter_sign_column_always = 1
"let g:gitgutter_highlight_lines = 1
let g:gitgutter_enabled = 1
nnoremap <c-c>g :GitGutterEnable<CR>
let g:gitgutter_max_signs = 1000

" let delimitMate_expand_cr=1

"======= syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_check_on_open = 0
let g:SyntasticToggleMode=1
nmap <leader>c :SyntasticCheck<cr>
nmap <leader>C :SyntasticToggleMode<cr>

" ======= beautify js
map <c-c><c-a> :call JsBeautify()<cr>

  " or
autocmd FileType javascript noremap <buffer>  <c-c><c-a> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-c><c-a> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-c><c-a> :call CSSBeautify()<cr>


" ======= enhance js syntax
"au FileType javascript call JavaScriptFold()
let g:used_javascript_libs = 'underscore,requirejs,react,angularjs,angularui,jasmine,jquery'
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 1
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 1
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 1
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1

""""""""""""""""""""""""" Emacs like binding """"""""""""""""""""""
" nmap <c-/> <Esc>:undo<CR>
"
" imap <c-/> <Esc>:undo<CR>
"
imap <c-x>2 <Esc>:vsplit<cr>zza
map <c-x>2 :vsplit<cr>zz

imap <c-x>3 <Esc>:split<cr><c-J>a
map <c-x>3 :split<cr><c-J>

nmap <leader>e :edit<space>
imap <leader>e <esc>:edit<space>

nmap <c-x><c-c> :wqa<cr>
imap <c-x><c-c> <Esc>:wqa<cr><cr>

nnoremap <C-l> zz
imap <C-l> <Esc>zza
nmap <C-j> <cr>
imap <c-j> <cr>
nmap fd <Esc>
imap <c-a> <esc>^i
nmap <c-a>  ^
imap <c-d> <esc>xa
nmap <c-d>  x
imap <c-k> <esc>ddi
nmap <c-k> <esc>dd "not work

"nmap <c-p> Hi<c-l><Esc>
"nmap <c-n> Li<c-l><Esc>
nmap <C-p> <pageUp>
nmap <C-n> <pageDown>
let g:SexyScroller_MaxTime = 100
"noremap <silent> <c-p> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
"noremap <silent> <c-n> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

imap <c-p> <up>
imap <c-n> <down>


"unmap <c-h>
nnoremap <c-h> X "not work
nmap <c-h> X

"快速保存
imap <c-x><c-s> <esc>:w!<cr>a
nmap <c-x><c-s> :w!<cr>

inoremap <c-e> <End>

inoremap <c-f> <right>
inoremap <c-b> <left>
" inoremap <c-n> <down>
" inoremap <c-p> <up>

cnoremap <c-f> <right>
cnoremap <c-b> <left>
" cnoremap <c-n> <down>
" cnoremap <c-p> <up>
cnoremap <c-a> <Home>
cnoremap <c-e> <End>
cnoremap <c-g>  <Esc>
cnoremap fd  <Esc>

"nmap <c-2> v
vmap <c-f> <right>
vmap <c-b> <left>
vmap <c-n> <pageDown>
vmap <c-p> <pageUp>
vmap <c-a> <Home>
vmap <c-e> <End>
vmap <c-g> <Esc><Esc>

"inoremap <leader>w :w!<cr> "快速保存
nmap <leader>L :highlight LineNr ctermfg=grey<cr>
nmap <c-f> <right>
nmap <c-b> <left>
" nmap <c-n> <down>
" nmap <c-p> <up>
nmap <c-e> <End>

"nmap <c-s> <Esc>/
"imap <c-s> <Esc>/
"f"""""""""""""""""""""""" Emacas like binding """"""""""""""""""""""

"""""""""""""""""""""""""" Basic settting """"""""

" 光标到达行尾或者行首时，特定键继续移动转至下一行或上一行
set whichwrap+=b,s,<,>,[,]"
set expandtab               " Use spaces instead of tabs"
"set listchars=tab:\|\ ,     " 显示Tab符，使用一高亮竖线代替"
set autoindent      " always set autoindenting on
set smartindent
set mps+=<:>        " 让<>可以使用%跳转
set hid             " allow to change buffer without saving
set shortmess=atI   " shortens messages to avoid 'press a key' prompt
set lazyredraw      " do not redraw while executing macros (much faster)"
set ignorecase  " Set search/replace pattern to ignore case
set smartcase   " Set smartcase mode on, If there is upper case character in the search patern, the 'ignorecase' option will be override.
set showcmd     " display incomplete commands
set incsearch   " do incremental searching
set hlsearch    " highlight search
set magic       " Enable magic matching
set showmatch   " show matching paren
"set wildmenu    " 增强模式中的命令行自动完成操作
"set mouse=a    " Enable mouse usage (all modes) in terminals
set showcmd
"在状态行显示目前所执行的命令，未完成的指令片段亦会显示出来
set scrolloff=3
"光标移动到buffer的顶部和底部时保持3行距离
set autoread "如果发现文件在 Vim 之外修改过而在 Vim 里面没有的话，自动重新读入。"
set fileformat=unix "设置<EOL>格式
set fileformats=unix,dos,mac "设置<EOL>格式
"Turn off backups and undo
set nobackup "不备份
set nowb
set noswapfile
set autoread
"use . command in virual mode
vnoremap . :norm.<CR>


map <c-x><c-k> :Bclose<cr>
imap <c-x><c-k> <Esc>:Bclose<cr>

command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! " . l:currentBufNum)
    endif
endfunction
